{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Message/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,oGCgBnKC,EARwB,SAACC,GACpC,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACH,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCFnBC,EAJsB,SAACT,GAClC,OAAO,qBAAKG,UAAWC,IAAEC,OAAlB,SAA2BL,EAAMU,W,0BCFtCC,EAAcC,YAAiB,IAoBtBC,cAA+C,CAACC,KAAM,2BAAtDD,EAbsF,SAACb,GAClG,OACI,uBAAMe,SAAUf,EAAMgB,aAAtB,UACI,8BACKC,YAA0C,qBAAsB,iBAAkB,CAACC,IAAUP,GAAcQ,OAEhH,8BACI,kDC2BDC,EA1BsB,SAACpB,GAElC,IAAIqB,EAAQrB,EAAMsB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAK,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYlB,KAAMkB,EAAElB,KAAiBN,GAAIwB,EAAExB,IAAZwB,EAAExB,OAC3EyB,EAAmBN,EAAMO,SAASH,KAAK,SAAAI,GAAC,OAAI,cAAC,EAAD,CAASnB,QAASmB,EAAEnB,SAAcmB,EAAE3B,OAOpF,OACI,sBAAKC,UAAWC,IAAEoB,QAAlB,UACI,qBAAKrB,UAAWC,IAAE0B,aAAlB,SACMP,IAEN,sBAAKpB,UAAWC,IAAEwB,SAAlB,UACI,8BAAOD,IACP,cAAC,EAAD,CAAgBZ,SAXR,SAACgB,GACjB/B,EAAMgC,YAAYD,EAAOE,0B,yBCzB7BC,EAA6B,SAACb,GAAD,MAA0B,CACvDc,OAAQd,EAAMe,KAAKD,S,YCSRE,sBACXC,aARkB,SAACjB,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAMhB,eAAsBiB,ODC1B,SAA+BC,GAYlC,OAFqCF,YAA4DJ,EAA5DI,EARiC,SAACtC,GACnE,IAAKmC,EAAwBnC,EAAxBmC,OAAWM,EAAhB,YAA6BzC,EAA7B,YACA,OAAKmC,EAGE,cAACK,EAAD,eAAsBC,IAHT,cAAC,IAAD,CAAUlC,GAAG,gBCN1B8B,CAGbjB","file":"static/js/4.cb410f73.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2yvhM\",\"dialogsItems\":\"Dialogs_dialogsItems__1eIO1\",\"active\":\"Dialogs_active__2jYKT\",\"messages\":\"Dialogs_messages__3cD4p\",\"message\":\"Dialogs_message__3I8nx\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogItem:React.FC<PropsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {NewMessageFormValuesType} from \"../Dialogs\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\n\r\n\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>(\"Enter your message\", \"newMessageBody\", [required, maxLength50], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n    </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType, PropsType>({form: 'dialog-add-message-form'})(AddMessageForm);\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport AddMessageForm from \"./Message/AddMessageForm\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\n\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} />  );\r\n    let messagesElements = state.messages.map( m => <Message message={m.message} key={m.id} /> );\r\n\r\n\r\n    let AddNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                { dialogsElements }\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{ messagesElements }</div>\r\n                <AddMessageForm onSubmit={AddNewMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect, MapDispatchToProps} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {\r\n\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n\r\n        return <WrappedComponent {...restProps as unknown as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n\r\n}","import React from 'react';\r\nimport {actions} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}