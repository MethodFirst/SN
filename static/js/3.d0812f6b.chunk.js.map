{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","descriptionBlock","mainPhoto","contact","postsBlock","posts","item","ProfileStatusWithHooks","props","_useState","useState","_useState2","Object","slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","react_default","a","createElement","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","_ref","handleSubmit","profile","error","onSubmit","className","style","formSummaryError","createField","Input","type","Textarea","keys","contacts","map","key","s","ProfileData","_ref2","isOwner","gotoEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo_Contact","contactTitle","contactValue","Contact","_ref3","ProfileInfo","savePhoto","saveProfile","Preloader","src","photos","large","userPhoto","target","files","length","ProfileInfo_ProfileDataForm","initialValues","formData","then","ProfileInfo_ProfileData","ProfileInfo_ProfileStatusWithHooks","Post","message","likesCount","required","MyPostsMemorized","React","memo","console","log","postsElements","p","MyPosts_Post_Post","id","MyPosts_AddPostForm_AddPostForm","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","MyPosts","Profile","Profile_ProfileInfo_ProfileInfo","MyPosts_MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","components_Profile_Profile","assign","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.d0812f6b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3bU64\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2EZsE\",\"contact\":\"ProfileInfo_contact__5SXlg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__17Rta\",\"posts\":\"MyPosts_posts__1jSqP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__Ywb1r\"};","import React, {useState, useEffect, ChangeEvent} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\ntype PropsType = {\r\n status: string\r\n    updateStatus: (status: string) =>void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    let[editMode, setEditMode] = useState(false);\r\n    let[status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n         setEditMode(true);\r\n    }\r\n\r\n   const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n       props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n                <b>Status:</b> <span onDoubleClick={activateEditMode} >{props.status || \"-------\"}</span>\r\n            </div>\r\n            }\r\n            { editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange}  autoFocus={true} onBlur={deactivateEditMode}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>save</button></div>\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n        </div>\r\n        <div>\r\n                <b>My professional skills</b>\r\n            {createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea, )}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>\r\n            {createField<ProfileTypeKeys>(\"AboutMe\", \"aboutMe\", [], Textarea, )}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                {/*//todo  create some solution for embedded objects*/}\r\n            <b>{key}: {createField(key, \"contacts.\" + key, [], Input)} </b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: \"edit-profile\"})(ProfileDataForm)\r\n\r\n\r\n\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let[editMode, setEditMode] = useState(false);\r\n\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        //todo: remove then\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Profile</h1>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData gotoEditMode={() => {setEditMode(true)}} profile={profile} isOwner={isOwner}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile : ProfileType\r\n    isOwner : boolean\r\n    gotoEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, gotoEditMode}) => {\r\n    return <div>\r\n        { isOwner && <div><button onClick={gotoEditMode}>edit</button></div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map((key) => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport {PostType} from \"../../../../types/types\";\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://www.pinclipart.com/picdir/big/581-5811619_transparent-agent-clipart-programmer-cartoon-png.png' />\r\n        { props.message }\r\n          <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from '../MyPosts.module.css';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input} from \"../../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../../utils/validators/validators\";\r\n\r\ntype PropsType = {\r\n\r\n}\r\n\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\n\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddPostFormValuesTypeKeys>(\"PostText\", \"newPostText\", [required], Input)}\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType >({form: 'profile-add-post'})(AddPostForm)","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport AddPostForm, {AddPostFormValuesType} from \"./AddPostForm/AddPostForm\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\n\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    console.log(\"RENDER YO\");\r\n\r\n    let postsElements =\r\n        props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n\r\n    let onAddPost = (values : AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\n\r\n\r\nexport default MyPostsMemorized;","import React from 'react';\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    addPost: actions.addPostActionCreator\r\n})(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile:React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus:  (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                // todo: may be replace push withRedirect??\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n        } else {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getStatus(userId);\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType , prevState: PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n"],"sourceRoot":""}