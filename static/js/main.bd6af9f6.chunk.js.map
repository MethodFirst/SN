{"version":3,"sources":["utils/validators/validators.ts","components/common/Paginator/Paginator.module.css","api/Profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","assets/images/user.png","api/chat-api.ts","redux/chat-reducer.ts","components/Users/users.module.css","components/Login/Login.module.css","api/api.ts","serviceWorker.js","api/Auth-api.ts","api/Security-api.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/sidebar-reducer.ts","utils/object-helpers.ts","api/Users-api.ts","redux/users-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/SearchFormForUsers.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Login/Login.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css","assets/images/preloader.svg","components/common/Preloader/Preloader.tsx"],"names":["required","value","maxLengthCreator","maxLength","length","module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","dialogs","name","sendMessage","newMessageBody","dialogsReducer","body","subcribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","console","error","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","map","m","v1","index","array","ResultCodesEnum","ResultCodesEnumForCaptcha","axios","create","withCredentials","baseURL","Boolean","window","location","hostname","match","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","login","isAuth","captchaUrl","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","initialized","sidebarReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","u","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","unfollow","users","totalUsersCount","isFetching","followingInProgress","Actions","count","requestUsers","page","totalCount","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","form","FormReducer","app","chat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","props","Suspense","fallback","Preloader","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","styles","paginator","onClick","cn","selectedPage","pageNumber","User","user","to","src","small","userPhoto","disabled","some","userSearchFormValidate","values","UsersSearchForm","React","memo","useSelector","enableReinitialize","initialValues","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","placeholder","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","search","substr","actualPage","actualFilter","Number","query","pathname","folloW","bind","unfolloW","UsersPage","pageTitle","LoginReduxForm","reduxForm","handleSubmit","createField","Input","undefined","style","formSummaryError","LoginPage","logo","testAccount","CaptchaIsRequired","selectIsAuth","selectCurrentUserLogin","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","alt","backgroundColor","icon","UserOutlined","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","ChatPage","SuspendedDialogs","SuspendedProfile","SuspendedChat","App","catchAllUnhandledErrors","alert","this","initializeApp","padding","margin","width","height","title","LaptopOutlined","minHeight","exact","path","render","textAlign","Component","AppContainer","withRouter","connect","promise","all","SN","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","validators","component","text","preloader"],"mappings":"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","file":"static/js/main.bd6af9f6.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\r\n\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n\r\n}\r\n\r\n\r\nexport const maxLengthCreator= (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__DvTSB\",\"pageNumber\":\"Paginator_pageNumber__32gG-\",\"selectedPage\":\"Paginator_selectedPage__2-VS7\"};","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {APIResponseType, instance} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data)\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\r\n    }\r\n}","import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {profileAPI} from \"../api/Profile-api\";\r\nimport {InferActionsTypes, BaseThunkType} from \"./redux-store\";\r\n\r\n\r\ntype PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\ntype ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\ntype PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\ntype ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: PhotosType\r\n    aboutMe: string\r\n}\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 13},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\r\n        {id: 3, message: 'Improve my skills', likesCount: 99},\r\n        {id: 4, message: 'Thank you', likesCount: 5}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\",\r\n};\r\n\r\n\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SN/PROFILE/ADD-POST': {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n        }\r\n        case 'SN/PROFILE/SET_STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case 'SN/PROFILE/SET_USER_PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n\r\n        case 'SN/PROFILE/DELETE_POST':\r\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\r\n\r\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\r\n            return {...state, profile: {...state.profile, photos: action.photos } as ProfileType}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD-POST', newPostText}as const),\r\n    setUserProfile: (profile: ProfileType ) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile}as const),\r\n    setStatus:  (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status}as const),\r\n    deletePost : (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId}as const),\r\n    savePhotoSuccess : (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos}as const)\r\n}\r\n\r\n\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data));\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let data = await profileAPI.updateStatus(status);\r\n\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.setStatus(status));\r\n        }\r\n    } catch (error){\r\n\r\n    }\r\n}\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file);\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType):ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n    const data = await profileAPI.saveProfile(profile);\r\n    if (data.resultCode === 0) {\r\n        if (userId != null){\r\n            dispatch(getUserProfile(userId));\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    } else {\r\n\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}));\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n\r\n}\r\n\r\nexport default profileReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","import {InferActionsTypes} from \"./redux-store\";\r\n\r\n\r\ntype DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Jove'},\r\n        {id: 2, name: 'Vic'},\r\n        {id: 3, name: 'Sv'},\r\n        {id: 4, name: 'Alex'},\r\n        {id: 5, name: 'Dandy'},\r\n        {id: 6, name: 'Mick'}\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your it skills?'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Nice to meet you'},\r\n        {id: 5, message: 'Thank you'}\r\n    ] as Array<MessageType>\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionType = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n    sendMessage : (newMessageBody: string) => ({type: 'SN/DIALOGS/SEND_MESSAGE', newMessageBody} as const)\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'SN/DIALOGS/SEND_MESSAGE':\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport default dialogsReducer;","export default __webpack_public_path__ + \"static/media/user.96e310a6.png\";","const subcribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 3000)\r\n}\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subcribers['messages-received'].forEach(s => s(newMessages))\r\n}\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('REFRESH PAGE')\r\n}\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subcribers['status-changed'].forEach(s => s(status))\r\n}\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n}\r\n\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subcribers['messages-received'] = []\r\n        subcribers['status-changed'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subcribers[eventName].push(callback)\r\n        return () => {\r\n            // @ts-ignore\r\n            subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\nexport type StatusType = 'pending' | 'ready' | 'error'\r\n","import {BaseThunkType, InferActionsTypes} from './redux-store'\r\nimport {Action, Dispatch} from 'redux'\r\nimport {FormAction} from 'redux-form/lib/actions'\r\nimport {chatAPI, ChatMessageAPIType, StatusType} from '../api/chat-api'\r\nimport {v1} from 'uuid'\r\n\r\ntype ChatMessageType = ChatMessageAPIType & {id: string}\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: 'pending' as StatusType\r\n}\r\n\r\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/chat/MESSAGES_RECEVIED':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages.map( m => ({...m, id: v1() }))]\r\n                    .filter((m, index, array) => index >= array.length - 100)\r\n            }\r\n        case 'SN/chat/STATUS_CHANGED':\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\r\n        type: 'SN/chat/MESSAGES_RECEVIED', payload: {messages}\r\n    } as const),\r\n    statusChanged: (status: StatusType) => ({\r\n        type: 'SN/chat/STATUS_CHANGED', payload: {status}\r\n    } as const)\r\n}\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n\r\n}\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\n\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\r\n    chatAPI.sendMessage(message)\r\n}\r\n\r\n\r\nexport default chatReducer\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__2Q8mV\",\"selectedPage\":\"users_selectedPage__1uDnL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Login_logo__3FW6V\"};","import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers:     {\r\n        \"API-KEY\": \"5b81d964-99b4-407f-90c1-60763e8e54a8\"\r\n    }\r\n});\r\n\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodesEnumForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number,\r\n    error: string | null\r\n}\r\n\r\nexport type APIResponseType <D ={}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {APIResponseType, instance, ResultCodesEnum, ResultCodesEnumForCaptcha} from \"./api\";\r\n\r\n\r\ntype MeResponseDataType = {\r\n        id: number\r\n        email: string\r\n        login: string\r\n}\r\ntype LoginResponseDataType = {\r\n        userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodesEnumForCaptcha>>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        }).then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}","import {instance} from \"./api\";\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {FormAction, stopSubmit, StopSubmitAction} from \"redux-form\";\r\nimport {ResultCodesEnum, ResultCodesEnumForCaptcha} from \"../api/api\";\r\nimport {authAPI} from \"../api/Auth-api\";\r\nimport {securityAPI} from \"../api/Security-api\";\r\nimport {InferActionsTypes, BaseThunkType} from \"./redux-store\";\r\n\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null,\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionType | FormAction>\r\n\r\nconst authReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/auth/SET_USER_DATA':\r\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) =>\r\n        ({type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}} as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\r\n    } as const),\r\n\r\n}\r\n\r\n\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n\r\n\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        let {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (data.resultCode === ResultCodesEnumForCaptcha.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.url;\r\n\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n}\r\n\r\n\r\nexport const logout = (): ThunkType => async (dispatch: any) => {\r\n    let response = await authAPI.logout();\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\nexport default authReducer;","\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\nimport {InferActionsTypes} from \"./redux-store\";\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\ntype ActionType = InferActionsTypes<typeof actions>\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n        dispatch(actions.initializedSuccess());\r\n    });\r\n}\r\n\r\n","let initialState = {};\r\ntype InitialStateType = typeof initialState\r\nconst sidebarReducer = (state = initialState, action: any) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","\r\nexport const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}","import {APIResponseType, GetItemsType, instance} from \"./api\";\r\nimport {AxiosPromise} from \"axios\";\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string, friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))\r\n            .then(res =>res.data)\r\n     },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n    }\r\n}","import {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {PhotosType, UserType} from \"../types/types\";\r\nimport {InferActionsTypes, AppStateType, BaseThunkType} from \"./redux-store\";\r\nimport {Action, Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {usersAPI} from \"../api/Users-api\";\r\nimport {APIResponseType} from \"../api/api\";\r\n\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, // Array of users Id\r\n    filter: {\r\n        term: \"\",\r\n        friend: null as null | boolean\r\n    }\r\n};\r\n\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InititalState => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case \"SN/USERS/SET_FILTER\":{\r\n            return {...state, filter: action.payload}\r\n        }\r\n        case 'SN/USERS/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'SN/USERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const Actions = {\r\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\r\n        count: totalUsersCount\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'SN/USERS/TOGGLE_IS_FETCHING', isFetching} as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n}\r\n\r\n\r\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(Actions.toggleIsFetching(true));\r\n        dispatch(Actions.setCurrentPage(page));\r\n        dispatch(Actions.setFilter(filter));\r\n\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend);\r\n        dispatch(Actions.toggleIsFetching(false));\r\n        dispatch(Actions.setUsers(data.items));\r\n        dispatch(Actions.setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>, userId: number,\r\n                                   apiMethod: (userId: number) => Promise<APIResponseType>, actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(Actions.toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n\r\n    if (response.resultCode == 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(Actions.toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n      await  _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), Actions.followSuccess);\r\n    }\r\n}\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n      await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), Actions.unfollowSuccess);\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n\r\n\r\nexport type InititalState = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsTypes = InferActionsTypes<typeof Actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as FormReducer} from 'redux-form'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport { Action } from \"redux\";\r\nimport chatReducer from './chat-reducer';\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: FormReducer,\r\n    app: appReducer,\r\n    chat: chatReducer\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends {[keys: string]: (...args: any[]) => infer U} ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\n\r\nexport default store;","import React from \"react\";\r\nimport Preloader from \"../components/common/Preloader/Preloader\";\r\n\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<Preloader />} >\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n    };\r\n}","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport App from \"../App\";\r\n\r\nconst getUsersSelector = (state : AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n\r\n   return users.filter(u => true);\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n\r\n\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n}","import React, {useState} from 'react';\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from \"classnames\";\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    onPageChanged?: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\n\r\nlet Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize, currentPage = 1, onPageChanged = x => x, portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return <div className={styles.paginator}>\r\n        { portionNumber > 1 &&\r\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={ cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber) }\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>\r\n            })}\r\n        { portionCount > portionNumber &&\r\n        <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\r\n\r\n\r\n    </div>\r\n}\r\n\r\nexport default Paginator;","import React from 'react';\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId : number) => void\r\n    follow: (userId : number) => void\r\n}\r\n\r\n\r\nlet User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n        <div>\r\n                <span>\r\n                    <div>\r\n                       <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                             className={styles.userPhoto}/>\r\n                       </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress\r\n                                .some(id => id === user.id)}\r\n                                      onClick={() => { unfollow(user.id) }}>\r\n                                Unfollow</button>\r\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                      onClick={() => { follow(user.id) }}>\r\n                                Follow</button>}\r\n\r\n                    </div>\r\n                </span>\r\n            <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"user.location.country\"}</div>\r\n                        <div>{\"user.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n        </div>)\r\n}\r\n\r\nexport default User;","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../redux/users-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../redux/users-selectors\";\r\n\r\nconst userSearchFormValidate = (values: any) => {\r\n    const errors = {}\r\n    return errors\r\n}\r\n\r\ntype FriendFormType = \"true\" | \"false\" | \"null\"\r\n\r\n\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\n\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n    const submit = (values: FormType, {setSubmitting}: {setSubmitting: (isSubmitting: boolean) => void} ) => {\r\n       const filter: FilterType = {\r\n           term: values.term,\r\n           friend: values.friend === \"null\" ?  null : values.friend === \"true\" ? true : false\r\n       }\r\n        props.onFilterChanged(filter);\r\n        setSubmitting(false);\r\n    };\r\n\r\n    return <div>\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{ term: filter.term , friend: String(filter.friend) as FriendFormType}}\r\n            validate={userSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({ isSubmitting }) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\" />\r\n                    <Field name=\"friend\" as=\"select\" placeholder=\"Favorite Color\">\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Only followed</option>\r\n                        <option value=\"false\">Only unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n})","import React, {useEffect} from 'react';\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {Form, Formik, Field} from 'formik';\r\nimport {UsersSearchForm} from \"./SearchFormForUsers\";\r\nimport {FilterType, follow, requestUsers, unfollow} from \"../../redux/users-reducer\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../redux/users-selectors\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as queryString from \"querystring\";\r\n\r\n\r\n\r\ntype PropsType = {}\r\n\r\ntype QueryParamsType = { term?: string, page?: string, friend?: string };\r\nexport const Users: React.FC<PropsType> = (props) => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const history = useHistory()\r\n\r\n\r\n    useEffect(() => {\r\n            const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n        switch (parsed.friend) {\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break;\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break;\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n        if(!!filter.term) query.term = filter.term\r\n        if(!!filter.friend !== null) query.friend = String(filter.term)\r\n        if(currentPage !== 1) query.page = String(currentPage)\r\n\r\n\r\n\r\n        history.push({\r\n            pathname: \"/developers\",\r\n            search: queryString.stringify(query)\r\n        })\r\n\r\n    }, [filter, currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n    const folloW = (userId: number) => {\r\n        dispatch(follow(userId));\r\n    }\r\n    const unfolloW = (userId: number) => {\r\n        dispatch(unfollow(userId));\r\n    }\r\n\r\n    return <div>\r\n\r\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\r\n        <div>\r\n            {\r\n                users.map(u => <User user={u}\r\n                                     followingInProgress={followingInProgress}\r\n                                     key={u.id}\r\n                                     unfollow={unfolloW}\r\n                                     follow={folloW}\r\n                    />\r\n                )\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {FilterType} from '../../redux/users-reducer';\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {getIsFetching} from \"../../redux/users-selectors\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {Users} from \"./Users\";\r\n\r\n\r\n\r\n\r\n\r\ntype UsersPagePropsType = {\r\n    pageTitle: string\r\n}\r\n\r\n\r\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\r\n\r\n\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return <>\r\n        <h2>{props.pageTitle}</h2>\r\n        {isFetching ? <Preloader/> : null}\r\n        <Users />\r\n    </>\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from \"./../common/FormsControls/FormsControls.module.css\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Button} from \"antd\";\r\nimport s from './Login.module.css';\r\n\r\ntype LoginFormOwnValues = {\r\n  captchaUrl : string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnValues> & LoginFormOwnValues> = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input)}\r\n            {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", [required], Input, {})}\r\n\r\n\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnValues>({form: 'login'})(LoginForm)\r\n\r\n\r\n\r\ntype LoginFormValuesType = {\r\n    captcha: string\r\n    rememberMe: boolean\r\n    email: string\r\n    password: string\r\n\r\n}\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\nexport const LoginPage: React.FC = () => {\r\n    const captchaUrl = useSelector( (state: AppStateType) => state.auth.captchaUrl)\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return <div className={s.logo}>\r\n        <h1 className={style.testAccount}>Testing account: free@samuraijs.com </h1>\r\n        <h1 className={style.testAccount}>Password: free </h1>\r\n        <h1 className={style.testAccount}></h1>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n        <h1 className={style.testAccount}>My Github repository: https://github.com/MethodFirst/SN </h1>\r\n    </div>\r\n}\r\n\r\n","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport App from \"../App\";\r\n\r\nexport const selectIsAuth = (state : AppStateType) => {\r\n    return state.auth.isAuth;\r\n}\r\n\r\nexport const selectCurrentUserLogin = (state : AppStateType) => {\r\n    return state.auth.login\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {Link, NavLink, Redirect} from \"react-router-dom\";\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectCurrentUserLogin, selectIsAuth} from \"../../redux/auth-selectors\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\n\r\n\r\nexport type MapPropsType = {}\r\n\r\n\r\nexport const Header: React.FC<MapPropsType> = (props) => {\r\n\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const login = useSelector(selectCurrentUserLogin)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutCallBack = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n\r\n    const {Header} = Layout;\r\n\r\n    return <Header className=\"header\">\r\n        <Row>\r\n            <Col span={18}> <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                <Menu.Item key=\"1\"><Link to=\"/developers\">Method</Link></Menu.Item>\r\n            </Menu>\r\n            </Col>\r\n\r\n            {isAuth\r\n                ? <>    <Col span={1}>\r\n                    <Avatar alt={login || ''} style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                </Col>\r\n                <Col span={5}>\r\n                    <Button onClick={logoutCallBack}>Log out</Button>\r\n                </Col>\r\n                </>\r\n                : <Col span={6}>\r\n                    <Button>\r\n                        <Redirect to={\"/login\"}/>\r\n                    </Button>\r\n                </Col>}\r\n    </Row>\r\n</Header>\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport {BrowserRouter, HashRouter, Link, NavLink, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\r\n\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport Preloader from \"./components/common/Preloader/Preloader\";\r\nimport store, {AppStateType} from \"./redux/redux-store\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\nimport {withAuthRedirect} from \"./hoc/withAuthRedirect\";\r\nimport s from \"./components/Header/Header.module.css\";\r\nimport st from \"./MainPage.module.css\"\r\nimport {UsersPage} from \"./components/Users/UsersContainer\";\r\nimport {LoginPage} from \"./components/Login/Login\";\r\nimport {Avatar, Button, Col, Row} from \"antd\";\r\n\r\nimport {Layout, Menu, Breadcrumb} from 'antd';\r\nimport {UserOutlined, LaptopOutlined, NotificationOutlined} from '@ant-design/icons';\r\nimport {Header} from \"./components/Header/Header\";\r\n\r\nconst {SubMenu} = Menu;\r\nconst {Content, Footer, Sider} = Layout;\r\n\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\nconst ChatPage = React.lazy(() => import('./pages/Chat/ChatPage'));\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer)\r\nconst SuspendedProfile = withSuspense(ProfileContainer)\r\nconst SuspendedChat = withSuspense(ChatPage)\r\n\r\nclass App extends Component<MapPropsType & DispatchPropsType> {\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        alert(\"Some error occured\")\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n\r\n        return (\r\n            <Layout>\r\n                <Header/>\r\n                <Content style={{padding: '0 50px'}}>\r\n                    <Breadcrumb style={{margin: '16px 0'}}>\r\n                        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>App</Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\r\n                        <Sider className=\"site-layout-background\" width={200}>\r\n                            <Menu\r\n                                mode=\"inline\"\r\n                                /* defaultSelectedKeys={['2']}*/\r\n                                /* defaultOpenKeys={['sub1']}*/\r\n                                style={{height: '100%'}}\r\n                            >\r\n\r\n                                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"My profile\">\r\n                                    <Menu.Item key=\"1\"><Link to=\"/profile\">Profile</Link></Menu.Item>\r\n                                    <Menu.Item key=\"2\"><NavLink to=\"/Chat\">Chat</NavLink></Menu.Item>\r\n                                    {/*  <Menu.Item key=\"3\">option3</Menu.Item>\r\n                                    <Menu.Item key=\"4\">option4</Menu.Item>*/}\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"Users\">\r\n                                    <Menu.Item key=\"5\"> <Link to=\"/developers\">Developers</Link></Menu.Item>\r\n                                </SubMenu>\r\n                                {/* <SubMenu key=\"sub3\" icon={<NotificationOutlined/>} title=\"subnav 3\">\r\n                                    <Menu.Item key=\"9\">option9</Menu.Item>\r\n                                    <Menu.Item key=\"10\">option10</Menu.Item>\r\n                                    <Menu.Item key=\"11\">option11</Menu.Item>\r\n                                    <Menu.Item key=\"12\">option12</Menu.Item>\r\n                                </SubMenu>*/}\r\n                            </Menu>\r\n                        </Sider>\r\n                        <Content style={{padding: '0 24px', minHeight: 700}}>\r\n                            <Switch>\r\n                                <Route exact path='/'\r\n                                       render={() => <Redirect to={\"/profile\"}/>}/>\r\n\r\n                                <Route path='/dialogs'\r\n                                       render={() => <SuspendedDialogs/>}/>\r\n\r\n                                <Route path='/profile/:userId?'\r\n                                       render={() => <SuspendedProfile/>}/>\r\n\r\n                                <Route path='/developers'\r\n                                       render={() => <UsersPage pageTitle={\"All developers\"}/>}/>\r\n\r\n                                <Route path='/login'\r\n                                       render={() => <LoginPage/>}/>\r\n\r\n                                <Route path='/chat'\r\n\r\n                                       render={() => <SuspendedChat/>}/>\r\n\r\n                                <Route path='*'\r\n                                       render={() => <div>404 NOT FOUND\r\n                                           <Button type={\"primary\"}>OK</Button>\r\n                                       </div>}/>\r\n                            </Switch>\r\n                        </Content>\r\n                    </Layout>\r\n                </Content>\r\n                <Footer style={{textAlign: 'center'}}>Method Social Network ©2021 Created by MethodFirst</Footer>\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))\r\n(App);\r\n\r\nconst SN: React.FC = () => {\r\n    return <HashRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </HashRouter>\r\n}\r\n\r\nexport default SN;\r\n","import * as serviceWorker from './serviceWorker';\r\nimport store from \"./redux/redux-store\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport SamuraiJSApp from \"./App\";\r\nimport {withAuthRedirect} from \"./hoc/withAuthRedirect\";\r\n\r\nReactDOM.render(<SamuraiJSApp/>, document.getElementById('root'));\r\n\r\n\r\n// API\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from \"react\"\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\"\r\nimport {Field, WrappedFieldProps} from \"redux-form\"\r\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\r\nimport {stringify} from \"querystring\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n    {hasError && <span>{error}</span>}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                                         name: FormKeysType,\r\n                                                         validators: Array<FieldValidatorType>,\r\n                                                         component: React.FC<WrappedFieldProps>,\r\n                                                         props = {}, text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n    validate={validators}\r\n    component={component}\r\n    {...props}\r\n    /> {text}\r\n    </div>\r\n}\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1YzHu\",\"error\":\"FormsControls_error__1k1ug\",\"formSummaryError\":\"FormsControls_formSummaryError__3Hnvw\",\"testAccount\":\"FormsControls_testAccount__hmnZh\"};","export default __webpack_public_path__ + \"static/media/preloader.5788b05c.svg\";","import React from 'react';\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\ntype PropsType = {\r\n\r\n}\r\n\r\nlet Preloader: React.FC<PropsType> = (props) => {\r\n    return <div  style={ { backgroundColor: 'white' } }>\r\n        <img src={preloader} />\r\n    </div>\r\n}\r\n\r\nexport default Preloader;"],"sourceRoot":""}