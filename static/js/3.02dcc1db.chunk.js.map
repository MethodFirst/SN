{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","s","input2","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","contact","ProfileData","isOwner","gotoEditMode","input","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","target","files","length","initialValues","formData","then","Post","item","message","likesCount","required","MyPosts","console","log","postsElements","posts","p","id","postsBlock","values","addPost","newPostText","MyPostsMemorized","React","memo","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.02dcc1db.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3bU64\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2EZsE\",\"contact\":\"ProfileInfo_contact__5SXlg\",\"input\":\"ProfileInfo_input__Kskxe\",\"input2\":\"ProfileInfo_input2__1t4Kq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__17Rta\",\"posts\":\"MyPosts_posts__1jSqP\",\"input\":\"MyPosts_input__1CN21\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__Ywb1r\"};","import React, {useState, useEffect, ChangeEvent} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\ntype PropsType = {\r\n status: string\r\n    updateStatus: (status: string) =>void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    let[editMode, setEditMode] = useState(false);\r\n    let[status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n         setEditMode(true);\r\n    }\r\n\r\n   const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n       props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n                <b>Status:</b> <span onDoubleClick={activateEditMode} >{props.status || \"-------\"}</span>\r\n            </div>\r\n            }\r\n            { editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange}  autoFocus={true} onBlur={deactivateEditMode}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button className={s.input2}>save</button></div>\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n        </div>\r\n        <div>\r\n                <b>My professional skills</b>\r\n            {createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea, )}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>\r\n            {createField<ProfileTypeKeys>(\"AboutMe\", \"aboutMe\", [], Textarea, )}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                {/*//todo  create some solution for embedded objects*/}\r\n            <b>{key}: {createField(key, \"contacts.\" + key, [], Input)} </b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: \"edit-profile\"})(ProfileDataForm)\r\n\r\n\r\n\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from \"./ProfileStatus\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\nimport {Button} from \"antd\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let[editMode, setEditMode] = useState(false);\r\n\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        //todo: remove then\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false);\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Profile</h1>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/> <h1>Select Photo</h1>\r\n                {isOwner && <input className={s.input} type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData gotoEditMode={() => {setEditMode(true)}} profile={profile} isOwner={isOwner}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile : ProfileType\r\n    isOwner : boolean\r\n    gotoEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, gotoEditMode}) => {\r\n    return <div> <h1>Edit Profile</h1>\r\n        { isOwner && <div><button className={s.input} onClick={gotoEditMode}>Edit Profile Information</button></div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map((key) => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport {PostType} from \"../../../../types/types\";\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src='https://www.pinclipart.com/picdir/big/581-5811619_transparent-agent-clipart-programmer-cartoon-png.png' />\r\n        { props.message }\r\n          <div>\r\n        <span>like</span> { props.likesCount }\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from '../MyPosts.module.css';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input} from \"../../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../../utils/validators/validators\";\r\n\r\ntype PropsType = {\r\n\r\n}\r\n\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\n\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddPostFormValuesTypeKeys>(\"PostText\", \"newPostText\", [required], Input)}\r\n            </div>\r\n            <div>\r\n                <button className={s.input}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType >({form: 'profile-add-post'})(AddPostForm)","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport AddPostForm, {AddPostFormValuesType} from \"./AddPostForm/AddPostForm\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\n\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    console.log(\"RENDER YO\");\r\n\r\n    let postsElements =\r\n        props.posts.map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n\r\n    let onAddPost = (values : AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\n\r\n\r\nexport default MyPostsMemorized;","import React from 'react';\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    addPost: actions.addPostActionCreator\r\n})(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile:React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus:  (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                // todo: may be replace push withRedirect??\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n        } else {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getStatus(userId);\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType , prevState: PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n"],"sourceRoot":""}