{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Message/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","dialogs","dialogsItems","active","messages","message","DialogItem","props","path","id","react_default","a","createElement","className","s","dialog","react_router_dom","to","name","Message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","state","dialogsPage","dialogsElements","map","d","Dialogs_DialogItem_DialogItem","key","messagesElements","m","Dialogs_Message_Message","Message_AddMessageForm","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","Object","objectSpread","actions","WrappedComponent","restProps","objectWithoutProperties","react_router"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,QAAA,yBAAAC,aAAA,8BAAAC,OAAA,wBAAAC,SAAA,0BAAAC,QAAA,kICgBHC,EARwB,SAACC,GACpC,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEX,QACtCO,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAASC,GAAIT,GAAOD,EAAMW,QCFnBC,EAJsB,SAACZ,GAClC,OAAOG,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEC,QAASR,EAAMF,oCCFtCe,EAAcC,YAAiB,IAoBtBC,cAA+C,CAACC,KAAM,2BAAtDD,CAbsF,SAACf,GAClG,OACIG,EAAAC,EAAAC,cAAA,QAAMY,SAAUjB,EAAMkB,cAClBf,EAAAC,EAAAC,cAAA,WACKc,YAA0C,qBAAsB,iBAAkB,CAACC,IAAUP,GAAcQ,MAEhHlB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0BC2BDiB,EA1BsB,SAACtB,GAElC,IAAIuB,EAAQvB,EAAMwB,YAEdC,EAAkBF,EAAM7B,QAAQgC,IAAK,SAAAC,GAAC,OAAIxB,EAAAC,EAAAC,cAACuB,EAAD,CAAYjB,KAAMgB,EAAEhB,KAAMkB,IAAKF,EAAEzB,GAAIA,GAAIyB,EAAEzB,OACrF4B,EAAmBP,EAAM1B,SAAS6B,IAAK,SAAAK,GAAC,OAAI5B,EAAAC,EAAAC,cAAC2B,EAAD,CAASlC,QAASiC,EAAEjC,QAAS+B,IAAKE,EAAE7B,OAOpF,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEb,SACdS,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEZ,cACZ8B,GAENtB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEV,UACdM,EAAAC,EAAAC,cAAA,WAAOyB,GACP3B,EAAAC,EAAAC,cAAC4B,EAAD,CAAgBhB,SAXR,SAACiB,GACjBlC,EAAMmC,YAAYD,EAAOE,+CCzB7BC,EAA6B,SAACd,GAAD,MAA0B,CACvDe,OAAQf,EAAMgB,KAAKD,qBCSRE,sBACXC,YARkB,SAAClB,GACnB,MAAO,CACHC,YAAaD,EAAMC,cAMhBkB,OAAAC,EAAA,EAAAD,CAAA,GAAsBE,MDC1B,SAA+BC,GAYlC,OAFqCJ,YAA4DJ,EAA5DI,CARiC,SAACzC,GAAU,IACxEsC,EAAwBtC,EAAxBsC,OAAWQ,EAD6DJ,OAAAK,EAAA,EAAAL,CAChD1C,EADgD,YAE7E,OAAKsC,EAGEnC,EAAAC,EAAAC,cAACwC,EAAqBC,GAHT3C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAUtC,GAAG,cCN1B8B,CAGblB","file":"static/js/4.b42691a6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2yvhM\",\"dialogsItems\":\"Dialogs_dialogsItems__1eIO1\",\"active\":\"Dialogs_active__2jYKT\",\"messages\":\"Dialogs_messages__3cD4p\",\"message\":\"Dialogs_message__3I8nx\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogItem:React.FC<PropsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {NewMessageFormValuesType} from \"../Dialogs\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\n\r\n\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>(\"Enter your message\", \"newMessageBody\", [required, maxLength50], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n    </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType, PropsType>({form: 'dialog-add-message-form'})(AddMessageForm);\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport AddMessageForm from \"./Message/AddMessageForm\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\n\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} />  );\r\n    let messagesElements = state.messages.map( m => <Message message={m.message} key={m.id} /> );\r\n\r\n\r\n    let AddNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                { dialogsElements }\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{ messagesElements }</div>\r\n                <AddMessageForm onSubmit={AddNewMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect, MapDispatchToProps} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {\r\n\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n\r\n        return <WrappedComponent {...restProps as unknown as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n\r\n}","import React from 'react';\r\nimport {actions} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}